group table-common;

import "ColumnUtils.stg"


forEach(i, list) ::= <%
<if(IsAsc.(sortOrder))>
for (int <i>=0; <i>\< <list>.size(); <i>++)
<else>
for (int <i>=<list>.size()-1; <i> >=0; <i>--)
<endif>
%>

fromTo(i, from, to) ::= <%
<if(IsAsc.(sortOrder))>
for (int <i>=<from>; <i>\<= <to>; <i>++)
<else>
for (int <i>=<to>; <i> >= <from>; <i>--)
<endif>
%>

adjustedPos(pos, list, order) ::= <%
<if(IsAsc.(order))>
	(<pos>)
<else>
    (<list>.size() - <pos>)
<endif>
%>

findPos(pos, col, val, exists) ::= <<
<pos> = <col>.binarySearch(<val>);
if (<pos> \< 0) {
    <pos> = -<pos>;
    <pos>--;
    <exists> = false;
} else {
	<exists> = true;
}
>>

importForTable() ::= <<
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashMap;
import java.util.Arrays;
import gnu.trove.iterator.TIntObjectIterator;
import gnu.trove.iterator.TDoubleObjectIterator;
import gnu.trove.map.hash.TIntObjectHashMap;
import gnu.trove.map.hash.TDoubleObjectHashMap;
import gnu.trove.list.TIntList;
import gnu.trove.list.array.TIntArrayList;
import gnu.trove.list.array.TLongArrayList;
import gnu.trove.list.array.TFloatArrayList;
import gnu.trove.list.array.TDoubleArrayList;
import gnu.trove.TIntCollection;
import gnu.trove.TDoubleCollection;
import socialite.eval.Manager;
import socialite.visitors.IntVisitor;
import socialite.visitors.ObjectVisitor;
import socialite.visitors.VisitorImpl;
import socialite.util.Assert;
import socialite.util.SociaLiteException;
import socialite.collection.SIntArrayList;
import socialite.collection.SLongArrayList;
import socialite.collection.SFloatArrayList;
import socialite.collection.SDoubleArrayList;
import socialite.collection.SIntConstArrayList;
import socialite.collection.SDoubleConstArrayList;
import socialite.collection.SArrayList;
import socialite.collection.SCollection;
import socialite.collection.SCollectionTmpl;
import socialite.collection.TupleVisitor;
import socialite.eval.TmpTablePool;
import socialite.util.concurrent.ConcurrentSoftQueue;
import socialite.util.concurrent.ConcurrentWeakQueue;
import socialite.resource.TableSliceMap;
import socialite.resource.DistTableSliceMap;
import socialite.type.*;
import socialite.util.ByteBufferPool;

import java.io.Externalizable;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.IOException;

import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
>>
