heap(type, tableClass, f, fname) ::= <<

private static final class Heap_<fname> {
	private static final int EMPTY=-1;
	
	private int[] array; // holds index to the table entry
	private int[] position;
	private int currentSize;
	private <tableClass> table;
	
	public Heap_<fname>(int size, <tableClass> _table) {
		if (size > 1024*1024*512) {
			Assert.die("This heap cannot handle this size:"+size+
					   "\nMake another one using a hash table");			
		}
		array = new int[size+1];
		position = new int[size];
		for (int i=0; i\<size; i++) {
			position[i] = EMPTY;
		}
		table=_table;
		currentSize=0;		
	
	}
	
	public void checkPositions() {
		for (int i=0; i\<position.length; i++) {
			if (position[i] != EMPTY) {
				int pos=position[i];
				Assert.true_(array[pos]==i);
			}
		}
	}
	
	public void insert(int xIdx) {
		if (position[xIdx]!=EMPTY) {
			percolateUp(position[xIdx]);
			return;
		} 
		<type> xVal = table.groupby(xIdx);
		int hole=++currentSize;
		
		for ( ; hole>1 && <f>(xVal, table.groupby(array[hole/2]))!=table.groupby(array[hole/2]); hole /= 2) {
			array[hole] = array[hole/2];
			position[xIdx] = hole;
		}
		array[hole] = xIdx;
		position[xIdx] = hole;
	}
	
		
	public int size() {
		return currentSize;
	}
	
	public boolean isEmpty() {
		return currentSize==0;
	}
	
	public boolean isFull() {
		return currentSize==array.length-1;
	}
	
	public int findMin() {
		return array[1];
	}
	
	public int popMin() {
		int min=findMin();
		position[min] = EMPTY;
		
		array[1] = array[currentSize--];
		position[array[1]] = 1;
		
		percolateDown(1);		
		return min;
	}
	
	private void percolateDown(int hole) {
		int child;
		int tmpIdx=array[hole];
		<type> tmpVal=table.groupby(tmpIdx);
		
		for (; hole*2\<=currentSize; hole=child) {
			child=hole*2;

			<type> childVal1=table.groupby(array[child]);
			<type> childVal2=table.groupby(array[child+1]);


			if (child!=currentSize && <f>(childVal2, childVal1)==childVal2) {
				child++;
				childVal1=childVal2;
			}
		
			if (<f>(childVal1, tmpVal)!=tmpVal) {			
				array[hole] = array[child];
				position[array[hole]] = hole;
			} else {
				break;
			}
		}
		array[hole]=tmpIdx;
		position[tmpIdx]=hole;
	}
	
	private void percolateUp(int hole) {
		int parent;
		int xIdx=array[hole];
		<type> xVal=table.groupby(xIdx);
	
		for ( ; hole>1; hole=parent) {
			parent=hole/2;
			<type> parentVal=table.groupby(array[parent]);
			if (<f>(xVal, parentVal)!=parentVal) {
				swap(hole, parent);
			} else {
				break;
			}			
		}
	}
	
	private void swap(int hole1, int hole2) {
		int tmpPosition1 = position[array[hole1]];		
		position[array[hole1]] = position[array[hole2]]; 
		position[array[hole2]] = tmpPosition1;

		int tmp = array[hole1];
		array[hole1] = array[hole2];
		array[hole2] = tmp;
	}
}
>>
