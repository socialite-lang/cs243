group dynamic-table;

import "TableCommon.stg"

dynamicTable(tableName, name, visitorClass, methods,
            size, id,
            columns, gbColumns, gbAggrColumn,
			sortedCol, idxCols,
			concurrent=false, multiSet=false, isNested=false) ::= <<
<if(!isNested)>
package socialite.tables;

<importForTable()>
<endif>

// dynamicTable
<if(!isNested)>public<endif> final class <name> extends AbstractTableInst {
	private static final long serialVersionUID = 1;

	public static int tableid() { return <id>; }
	public static <name> create() { return new <name>(); }	
	
	static boolean groupby = false;
	static void setGroupby() { 
		if (groupby == false) {groupby = true;} 
	}
	static int makePos(int nodePos, int offset) { return (nodePos \<\< 8) | offset; }
	static int getPos(int val) { return (val >\> 8); }
	static int getOffset(int val) { return (val & 0xff); }
	
    static final class Node$Init extends Node {
        static final int INIT_CHUNK_SIZE=4;
        Node$Init() { super(INIT_CHUNK_SIZE); }
        boolean isFull() {
        	if (len \< CHUNK_SIZE) return false;
        	return super.isFull();
        }
        int insert(<columns:{c|<c.type> a<i0>}; separator=", ">) {
        	if (len == col0().length) {
        		expand();
        	}
        	return super.insert(<columns:{c|a<i0>}; separator=", ">);
        }
        void expand() {
        	int size = len*2;
        	<columns:{c|<c.type>[] _col<i0> = new <c.type>[size];<\n>}>
        	<columns:{c|System.arraycopy(col<i0>, 0, _col<i0>, 0, len);<\n>}>
        	<columns:{c|col<i0> = _col<i0>;<\n>}>            
        }
    }
    static class Node {
	    static ConcurrentWeakQueue\<Node> pool = new ConcurrentWeakQueue\<Node>();
	    static Node alloc() {
	    	Node n = pool.poll();
	        if (n == null) {
	            n = new Node();
	        } else {
	            n.init();
	        }
	        return n;
	    }
	    static void free(Node n) { pool.add(n); }

        static final int CHUNK_SIZE=128;
        
	    <columns:{c|Object col<i0>;<\n>}>
        <if(concurrent)>volatile<endif> int len;

        Node() { this(CHUNK_SIZE); }
        Node(int capacity) {
            <columns:{c|col<i0> = new <c.type>[capacity];<\n>}>
        }
        void init() {len = 0;}
        public void free() { Node.free(this); }

		boolean isEmpty() { return len() == 0; }
        boolean isFull() { return len() >= col0().length; }
        int len() { return len; }

        <columns:{c|<c.type>[] col<i0>() { return (<c.type>[])col<i0>; \}<\n>}>

		public String toString() {
			String s="{";
			for (int i=0; i\<len; i++) {
				s+="(";
				<columns:{c|s+= col<i0>()[i]+" ";<\n>}>
				s+="),";
			}
			s+="}";
			return s;
		}
		void spill(int num, Node to) {
			assert num > 0 && num \< len;
			<columns:{c|System.arraycopy(to.col<i0>(), 0, to.col<i0>(), num, to.len);<\n>}>
			<columns:{c|System.arraycopy(col<i0>(), len-num, to.col<i0>(), 0, num);<\n>}>
			len -= num;
			to.len += num;
		}
		<if(sortedCol)>
		int binarySearch1(<sortedCol.type> val) {
			int pos = Arrays.binarySearch(col<sortedCol.relPos>(), 0, len, val);
			if (pos \< 0) return pos;
			while (pos > 0) {
				pos--;
				if (col<sortedCol.relPos>()[pos]!=val) {
					return pos+1;
				}
			}
			return pos;
		}
		boolean contains_sorted(<columns:{c|<c.type> a<i0>}; separator=", ">, boolean[] dontcare) {
			int pos = binarySearch1(a<sortedCol.relPos>);
			if (pos \< 0) return false;
			for (int i=pos; i\<len; i++) {
				if (col<sortedCol.relPos>()[i]!=a<sortedCol.relPos>) {return false;}
				if (contains_at(<columns:{c|a<i0>}; separator=", ">,i,dontcare)) {return true;}
			}
			return false;
		}
		<endif>
        boolean contains(<columns:{c|<c.type> a<i0>}; separator=", ">, boolean[] dontcare) {
        <if(sortedCol)>
        	if (dontcare==null || !dontcare[<sortedCol.relPos>]) {
        		return contains_sorted(<columns:{c|a<i0>}; separator=", ">,dontcare);
        	}
        <endif>
        	if (dontcare==null) {return contains(<columns:{c|a<i0>}; separator=", ">);}
            for (int i=0; i\<len(); i++) {
                if (true<columns:{c|&& (dontcare[<i0>]||col<i0>()[i]<EqOpMap.(c.type)>(a<i0>))}>) {
                    return true;
                }
            }
            return false;
        }
        boolean contains(<columns:{c|<c.type> a<i0>}; separator=", ">) {
        <if(sortedCol)>
        	if (true) { return contains_sorted(<columns:{c|a<i0>}; separator=", ">,null); }
        <endif>
            for (int i=0; i\<len(); i++) {
                if (true<columns:{c|&& col<i0>()[i]<EqOpMap.(c.type)>(a<i0>)}>) {
                    return true;
                }
            }
            return false;
        }
        boolean contains_at(<columns:{c|<c.type> a<i0>}; separator=", ">, int at, boolean[] dontcare) {
        	if (dontcare==null) {return contains_at(<columns:{c|a<i0>}; separator=", ">,at);}
            int i = at;
            return true<columns:{c|&& (dontcare[<i0>]||a<i0><EqOpMap.(c.type)>(col<i0>()[i]))}>;
        }
        boolean contains_at(<columns:{c|<c.type> a<i0>}; separator=", ">, int at) {
            int i = at;
            return true<columns:{c|&& a<i0><EqOpMap.(c.type)>(col<i0>()[i])}>;
        }
    <if(sortedCol)>
        int insert_sorted(<columns:{c|<c.type> a<i0>}; separator=", ">) {
        	int pos = Arrays.binarySearch(col<sortedCol.relPos>(), 0, len, a<sortedCol.relPos>);
        	if (pos \< 0) { pos = -pos-1; }
        	<columns:{c|System.arraycopy(col<i0>(), pos, col<i0>(), pos+1, len-pos);<\n>}>	
        	
        	<columns:{c|col<i0>()[pos] = a<i0>;<\n>}>
        	return len++;
        }
    <endif>
        int insert(<columns:{c|<c.type> a<i0>}; separator=", ">) {
        	<if(sortedCol)>if (true) {return insert_sorted(<columns:{c|a<i0>}; separator=", ">);}<endif>
            <columns:{c|col<i0>()[len] = a<i0>;<\n>}>
            return len++;
        }
        boolean iterate(<visitorClass> v) {
            for (int i=0; i\<len; i++) {
                boolean cont = v.visit(<columns:{c|col<i0>()[i]}; separator=", ">);
                if (!cont) return false;
            }
            return true;
        }
        boolean iterate_at(<visitorClass> v, int pos) {
            return v.visit(<columns:{c|col<i0>()[pos]}; separator=", ">);
        }
	}
	SArrayList\<Node> nodeList;
	<idxCols:{ic|SPosIndex index<ic.relPos>;<\n>}>
<if(gbColumns)>
	SPosIndex groupbyMap;
<endif>

	public <name>() {
		nodeList = new SArrayList\<Node>();
		nodeList.add(new Node$Init());
		<idxCols:{ic|index<ic.relPos> = new SPosIndex();<\n>}>
		<if (gbColumns && !rest(gbColumns) && first(gbColumns).indexed)>
			groupbyMap = index<first(gbColumns).relPos>;
		<endif>
	}
	
	public int id() { return <id>; }
    public int size() { assert false; return -1; }
    public String name() { return "<tableName>"; }

    public boolean isEmpty() { return nodeList.getQuick(0).len() == 0; }
	public String toString() {
		String str="Table <tableName>(id=<id>):";
		return str + nodeList.getQuick(0).toString();
	}
	public void clearQuick() { clear(); }
	public void clear() {
		for (int i=0; i\<nodeList.size(); i++) {
			Node n = nodeList.getQuick(i);
			nodeList.setQuick(i, null);
			n.free();
		}
		nodeList.resetQuick();
		nodeList.add(new Node$Init());
		<idxCols:{ic|index<ic.relPos>.clear();<\n>}>
		<if(gbColumns)>if(groupbyMap!=null) groupbyMap.clear();<endif>
	}
	public boolean contains(<columns:{c|final <c.type> a<i0>};separator=", ">) {
		<if(sortedCol)>if (true) {return contains_sorted(<columns:{c|a<i0>};separator=",">,null);}<endif>
		<if(idxCols)>
			<if(rest(columns))>
			final boolean[] contains = new boolean[] {false};
			index<first(idxCols).relPos>.iterateBy(a<first(idxCols).relPos>, new IntVisitor() {
				public boolean visit(int val) {
					int pos = getPos(val);
		            int offset = getOffset(val);
		            Node n = nodeList.getQuick(pos);
		            if (n.contains_at(<columns:{c|a<i0>};separator=", ">, offset)) {
		                contains[0] = true;
		                return false;
		            }
		            return true;
				}
			});
			return contains[0];
			<else>
			return index<first(idxCols).relPos>.contains(a<first(idxCols).relPos>);
			<endif>
		<else>
		for (int i=0; i\<nodeList.size(); i++) {
			Node n = nodeList.getQuick(i);
		    if (n.contains(<columns:{c|a<i0>};separator=", ">))
		        return true;
		}
		return false;
		<endif>
	}
	public boolean contains(<columns:{c|final <c.type> a<i0>};separator=", ">, final boolean[] dontcare) {
		<if(sortedCol)>
			if (dontcare==null || !dontcare[<sortedCol.relPos>]) {return contains_sorted(<columns:{c|a<i0>};separator=",">,dontcare);}
		<endif>
		if (dontcare==null) {return contains(<columns:{c|a<i0>};separator=", ">);} 
		<if(idxCols)>
		if (!dontcare[<first(idxCols).relPos>]) {
            <if(rest(columns))>
			final boolean[] contains = new boolean[] {false};
			index<first(idxCols).relPos>.iterateBy(a<first(idxCols).relPos>, new IntVisitor() {
				public boolean visit(int val) {
					int pos = getPos(val);
		            int offset = getOffset(val);
		            Node n = nodeList.getQuick(pos);
		            if (n.contains_at(<columns:{c|a<i0>};separator=", ">, offset, dontcare)) {
		                contains[0] = true;
		                return false;
		            }
		            return true;
				}
			});
			return contains[0];
			<else> 
			return index<first(idxCols).relPos>.contains(a<first(idxCols).relPos>);
			<endif>
		}
		<endif>
		for (int i=0; i\<nodeList.size(); i++) {
			Node n = nodeList.getQuick(i); 
            if (n.contains(<columns:{c|a<i0>};separator=", ">, dontcare))
        	    return true;
        }
		return false;
	}

	void addToIndex(<idxCols:{ic|<ic.type> a<ic.relPos> ,}>int pos) {
	    <idxCols:{ic|index<ic.relPos>.add(a<ic.relPos>, pos);<\n>}>
	}
	void addToGroupbyMap(<gbColumns:{g|<g.type> a<g.relPos>,}>int pos) {
	    <if(gbColumns)>
	    	if (groupby) { ensureGroupbyMap(); }
	    	if (groupbyMap == null) { return; }
     	<if(rest(gbColumns))>
     	    Tuple<gbColumns:{g|_<TupleMap.(g.type)>}> groupbyTup = new Tuple<gbColumns:{g|_<TupleMap.(g.type)>}>();
     		<gbColumns:{g|groupbyTup._<i0> = a<i0>;}; separator="\n">
     		groupbyMap.add(groupbyTup, pos);
     	<elseif(first(gbColumns).indexed)>
     		assert groupbyMap == index<first(gbColumns).relPos>;
     	<else>
     		groupbyMap.add(a0, pos);
     	<endif>
     	<endif>
	}
	<if(sortedCol)>
	int binarySearch(<sortedCol.type> v) {
		if (nodeList.size()==1 && nodeList.getQuick(0).isEmpty()) {return -1;}
		int lo=0, hi=nodeList.size()-1;
		<sortedCol.type> midVal1, midVal2;
		while (lo \<= hi) {
			int mid = (lo+hi)/2;
			Node n = nodeList.getQuick(mid);
			midVal1 = n.col<sortedCol.relPos>()[0];
			midVal2 = n.col<sortedCol.relPos>()[n.len-1];			
		<if(sortedCol.primitive)>
			if (midVal2 \< v) {lo = mid+1;} 
			else if (midVal1 > v) {hi = mid-1;}
			else {return mid;}
		<else>
			if (midVal2.compareTo(v) \< 0) {lo = mid+1;}
			else if (midVal1.compareTo(v) > 0) {hi = mid-1;} 
			else {return mid;}
		<endif> 
		}
		if (lo == nodeList.size()) {
			if (!nodeList.get(lo-1).isFull()) { lo--; }
		}
		return -(lo+1);
	}
	int binarySearch1(<sortedCol.type> v) {
		int pos = binarySearch(v);
		if (pos \< 0) return pos;
		while (pos > 0) {
			pos--;
			Node n = nodeList.getQuick(pos);
			if (n.col<sortedCol.relPos>()[n.len-1]!=v) {return pos+1;}
		}
		return pos;
	}
	int binarySearch2(<sortedCol.type> v) {
		int pos = binarySearch(v);
		if (pos \< 0) return pos;
		while (pos \< nodeList.size()-1) {
			pos++;
			Node n = nodeList.getQuick(pos);
			if (n.col<sortedCol.relPos>()[0]!=v) {return pos-1;}
		}
		return pos;
	}
	boolean contains_sorted(<columns:{c|final <c.type> a<i0>};separator=", ">,boolean[] dontcare) {
		int pos = binarySearch1(a<sortedCol.relPos>);
		if (pos \< 0) {return false;}
		for (int i=pos; i\<nodeList.size(); i++) {
			if (nodeList.getQuick(i).col<sortedCol.relPos>()[0] > a<sortedCol.relPos>) {
				return false;
			}
			if (nodeList.getQuick(i).contains(<columns:{c|a<i0>};separator=", ">,dontcare)) {
				return true;
			}
		}
		return false;
	}
	boolean insert_sorted(<columns:{c|<c.type> a<i0>};separator=", ">) {
		int pos = binarySearch(a<sortedCol.relPos>);
		if (pos \< 0) { pos = -pos-1; }
		Node n;
		if (pos \< nodeList.size()) {
			n = nodeList.getQuick(pos);
			if (n.isFull()) {
				Node next;
				if (pos == nodeList.size()-1) {
					next = Node.alloc();
					nodeList.add(next);
				} else {
					next = nodeList.getQuick(pos+1);
				}
				if (next.isFull()) {
					Node x = Node.alloc();
					n.spill(n.len/2, x);
					nodeList.insert(pos+1, x);
				} else {
					n.spill(1, next);
				}
			}
		} else {
			n = Node.alloc();
			nodeList.add(n);
		}
		n.insert(<columns:{c|a<i0>};separator=", ">);
		return true;
	}
	<endif>
	public boolean insert(<columns:{c|<c.type> a<i0>};separator=", ">) {
	<if(!isNested && !multiSet)>
		if (contains(<columns:{c|a<i0>};separator=",">)) return false;
	<endif>
	<if(sortedCol)>
		if (true) { return insert_sorted(<columns:{c|a<i0>};separator=", ">); }
	<endif>
		Node last = nodeList.getQuick(nodeList.size()-1);
		int nodePos = nodeList.size()-1;
	    if (last.isFull()) {
			last = Node.alloc();
			nodeList.add(last);
			nodePos = nodeList.size()-1;
	    }
        int offset = last.insert(<columns:{c|a<i0>};separator=", ">);
		int pos = makePos(nodePos, offset);
        addToIndex(<idxCols:{ic|a<ic.relPos> ,}>pos);
        addToGroupbyMap(<gbColumns:{g|a<g.relPos>, }>pos);
		return true;
	}
	public boolean insertAtomic(<columns:{c|<c.type> a<i0>};separator=", ">) {
        synchronized(this) {
            return insert(<columns:{c|a<i0>};separator=", ">);
        }
    }

<if(gbColumns)> //  if (gbColumns) [
    <groupbyDyn()>
<endif> // ] if(gbColumns)
	
	public void iterate(<visitorClass> v) {
		for (int i=0; i\<nodeList.size(); i++) {
			Node n = nodeList.getQuick(i);
		    boolean cont = n.iterate(v);
		    if (!cont) return;
		}
	}
<idxCols:{c|
	public void iterate_by_<c.absPos>(<c.type> a, final <visitorClass> v) {
		index<c.relPos>.iterateBy(a, new IntVisitor() {
			public boolean visit(int val) {
	        	int pos = getPos(val);
	            int offset = getOffset(val);
	            Node n = nodeList.getQuick(pos);
		        return n.iterate_at(v, offset);
		    \}
		\});
	\}
}>
<if(sortedCol)>
public void iterate_part_from_<sortedCol.absPos>(<sortedCol.type> from, boolean inclusive, final <visitorClass> v) {
	int nodePos = binarySearch1(from);
	if (nodePos \< 0) { nodePos = -nodePos-1; }
	for (int i=nodePos; i\<nodeList.size(); i++) {
		Node n = nodeList.getQuick(i);
		n.iterate(v);
	}
}
public void iterate_part_to_<sortedCol.absPos>(<sortedCol.type> to, boolean inclusive, final <visitorClass> v) {
	int nodePos = binarySearch2(to);
	if (nodePos \< 0) { nodePos = -nodePos-1; }
	for (int i=0; i\<=nodePos; i++) {
		Node n = nodeList.getQuick(i);
		n.iterate(v);
	}
}

<endif>

	<methods;separator="\n">
}
>>
groupbyGet() ::= <<
<if(rest(gbColumns))>
    Tuple<gbColumns:{g|_<TupleMap.(g.type)>}> groupbyTup = new Tuple<gbColumns:{g|_<TupleMap.(g.type)>}>();
	<gbColumns:{g|groupbyTup._<i0> = a<i0>;}; separator="\n">
	int pos = groupbyMap.get(groupbyTup);
<else>
    int pos = groupbyMap.get(a0);
<endif>
>>
getNodeAndOffset() ::= <<
    int nodePos = getPos(pos);
    Node n = nodeList.getQuick(nodePos);
    int offset = getOffset(pos);
>>

groupbyDyn() ::= <<
	void ensureGroupbyMap() {
		if (groupbyMap == null) { groupbyMap = new SPosIndex(); }
	}
<if(gbColumns)>
    public <gbAggrColumn.type> groupby(<gbColumns:{g|<g.type> a<i0>};separator=", ">) {
		setGroupby();
		ensureGroupbyMap();
    	<groupbyGet()>
		<getNodeAndOffset()>
		return n.col<gbAggrColumn.relPos>()[offset];
	}
	public boolean contains(<gbColumns:{g|<g.type> a<i0>};separator=", ">) {
	    setGroupby();
    	ensureGroupbyMap();
	    <groupbyGet()>
	    return pos >= 0;
	}
	public boolean update(<columns:{c|<c.type> a<i0>}; separator=", ">) {
        setGroupby();
    	ensureGroupbyMap();
        <groupbyGet()>
        if (pos \< 0) { return insert(<columns:{c|a<i0>}; separator=", ">); }
	    <getNodeAndOffset()>
	    <columns:{c|n.col<i0>()[offset] = a<i0>;<\n>}>
	    return true;
	}
<else> // if (!gbColumns) [
	public boolean update(<columns:{c|<c.type> a<i0>}; separator=", ">) {
		return insert(<columns:{c|a<i0>}; separator=", ">);
	}
<endif>
>>