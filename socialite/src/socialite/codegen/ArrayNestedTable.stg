group array-nested-table;

import "TableCommon.stg"

arrayNestedTable(tableName, name, refArrayClass, visitorClass, nestedTable, classes,
				 base, size, 
                 methods, id,  
				 columns, nestedColumns, nestedNestedColumns, gbColumns, gbNestedColumns, gbAggrColumn, 
				 idxCols,
				 concurrent=false, multiSet=false, isNested=false) ::= <<
<rest(columns):{c|<if(c.sorted)>ERROR, Cannot have sorted column for array table!<endif>}>				 
<if(!isNested)>
package socialite.tables;

<importForTable()>
<endif>

// ArrayNestedTable
<if(!isNested)>public<endif> class <name> extends AbstractTableInst <if(concurrent)>implements ConcurrentTableInst<endif> {
	private static final long serialVersionUID = 1;
	
	public static int tableid() { return <id>; }
	
	public static <name> create() { return new <name>(<base>, <size>); }
	public static <name> create(<first(columns).type> base, int size) { return new <name>(base, size); }
<if(IsInt.(first(columns).type))>
	public static <name> create(Integer base, Integer size) { return new <name>(base.intValue(), size.intValue()); }
<else>	
	public static <name> create(Long base, Integer size) { return new <name>(base.longValue(), size.intValue()); }
<endif>

    static <nestedTable> updating = new <nestedTable>();

	<first(columns).type> base;	
	<rest(columns): {c|<c.type> col<i>[];<\n>}>
	<idxCols:{ic|SPosIndex index<ic.relPos>;<\n>}>
		
	<refArrayClass>\<<nestedTable>\> nestedTables;
	boolean isEmpty = true;
	
	public <name>() { }
	public <name>(<first(columns).type> _base, int size) {
		base = _base;		
		<rest(columns):{c|col<i>=new <if(c.arrayType)><c.compType>[size][]<else><c.type>[size]<endif>;<\n>}>;
		<idxCols:{ic|index<ic.relPos> = new SPosIndex();<\n>}>
		nestedTables = new <refArrayClass>\<<nestedTable>\>(size);
	}

<rest(columns):{c|private <c.type> col<i>(int i) {return col<i>[i];\}<\n>}>
	
	public int size() { return -1; }
	public int id() { return <id>; }
	public boolean isEmpty() { return isEmpty; }
    public String name() { return "<tableName>"; }
	
	public void clearQuick() {
		for (int i=0; i\<nestedTables.length(); i++) {
			if (nestedTables.get(i)!=null) {
				nestedTables.get(i).clearQuick();
			}
		}
		isEmpty = true;
	}
	public void clear() {
		clearQuick();
	}
	public void clear(int from, int to) {
		from -= base;
		to -= base;
		for (int i=from; i\<to; i++) {
			if (nestedTables.get(i)!=null) {
				nestedTables.get(i).clearQuick();
			}
		}
		isEmpty = true;
	}
	void rangeCheck(<first(columns).type> i) {
		if (i\<0 || i>=nestedTables.length()) {
			throw new SociaLiteException("Value out of range for <tableName> <first(columns).absPos>'th column: "+(i+base));
		}
	}

	public void iterate_range_<first(columns).absPos>(<first(columns).type> _from, <first(columns).type> _to, <visitorClass> v) {
		if (isEmpty) return;
		int from=(int)(_from-base); rangeCheck(from);
		int to=(int)(_to-base); rangeCheck(to);
		for (int i=from; i\<=to; i++) {
			if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
				boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
				if (cont) nestedTables.get(i).iterate(v);
			}
		}
	}	
<if(first(nestedColumns).arrayIndex)>	
	public void iterate_range_<first(nestedColumns).absPos>(
					<first(nestedColumns).type> _from, <first(nestedColumns).type> _to, <visitorClass> v) {
		if (isEmpty) return;
		for (int i=0; i\<nestedTables.length(); i++) {
			if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
				boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
				if (cont) nestedTables.get(i).iterate_range_<first(nestedColumns).absPos>(_from, _to, v);
			}
		}
	}
	public void iterate_range_<first(nestedColumns).absPos>_by_<first(columns).absPos>(<first(columns).type> a0, 
								   <first(nestedColumns).type> _from, <first(nestedColumns).type> _to, <visitorClass> v) {
		int i=(int)(a0-base); rangeCheck(i);
		if (nestedTables.get(i)==null) return;
		if (nestedTables.get(i).isEmpty()) return;
		
		boolean cont=v.visit<columns:{c|_<c.absPos>}>(a0<rest(columns):{c|, col<i>(i)}>);
		if (cont) nestedTables.get(i).iterate_range_<first(nestedColumns).absPos>(_from, _to, v);
	}		
<endif>
<if(first(nestedColumns).indexed)>
	public void iterate_range_<first(columns).absPos>_by_<first(nestedColumns).absPos>(<first(nestedColumns).type> n,
																					int _from, int _to, <visitorClass> v) {
		int from=(int)(_from-base); rangeCheck(from);
		int to=(int)(_to-base); rangeCheck(to);
		for (int i=from; i\<=to; i++) {
			if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
				boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
				if (cont) nestedTables.get(i).iterate_by_<first(nestedColumns).absPos>(n, v);
			}
		}
	}
<endif>

	public void iterate(<visitorClass> v) {
		if (isEmpty) return;
		for (int i=0; i\<nestedTables.length(); i++) {
			if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
				boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
				if (cont) nestedTables.get(i).iterate(v);
			}
		}
	}	
	public void iterate_by_<first(columns).absPos>(<first(columns).type> n, <visitorClass> v) {
		int i=(int)(n-base); rangeCheck(i);
		if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
			boolean cont=v.visit<columns:{c|_<c.absPos>}>(n<rest(columns):{c|, col<i>(i)}>);
			if (cont) nestedTables.get(i).iterate(v);
		}
	}
<idxCols:{c|
	public void iterate_by_<c.absPos>(<c.type> a, final <visitorClass> v) {
		index<c.relPos>.iterateBy(a,
			new IntVisitor() {
				public boolean visit(int pos) {
					boolean cont=v.visit<columns:{c|_<c.absPos>}>(n<rest(columns):{c|, col<i>(pos)}>);
					if (cont) nestedTables.get(pos).iterate(v);
				\}\});
	\}
}>

<if(first(nestedColumns).indexed)>
	public void iterate_by_<first(columns).absPos>_<first(nestedColumns).absPos>(<first(columns).type> a0,<first(nestedColumns).type> b0, <visitorClass> v) {
		int i=(int)(a0-base); rangeCheck(i);
		if (nestedTables.get(i)==null) return;
		if (nestedTables.get(i).isEmpty()) return;
		
		boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
		if (cont) nestedTables.get(i).iterate_by_<first(nestedColumns).absPos>(b0, v);
	}
	
	<if(first(nestedNestedColumns).indexed)>
	public void iterate_by_<first(columns).absPos>_<first(nestedColumns).absPos>_<first(nestedNestedColumns).absPos>
						(<first(columns).type> a0,<first(nestedColumns).type> b0, <first(nestedNestedColumns).type> c0, <visitorClass> v) {
		int i=(int)(a0-base); rangeCheck(i);
		if (nestedTables.get(i)==null) return;
		if (nestedTables.get(i).isEmpty()) return;
		
		boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
		if (cont) nestedTables.get(i).iterate_by_<first(nestedColumns).absPos>_<first(nestedNestedColumns).absPos>(b0, c0, v);
	}
	<endif>
<endif>

<if(first(nestedColumns).indexed)>
	public void iterate_by_<first(nestedColumns).absPos>(<first(nestedColumns).type> n, <visitorClass> v) {
		for (int i=0; i\<nestedTables.length(); i++) {
			if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
				boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
				if (cont) nestedTables.get(i).iterate_by_<first(nestedColumns).absPos>(n, v);
			}
		}
	}
	<if(first(nestedNestedColumns).indexed)>
	public void iterate_by_<first(nestedColumns).absPos>_<first(nestedNestedColumns).absPos>
						(<first(nestedColumns).type> a0, <first(nestedNestedColumns).type> b0, <visitorClass> v) {
		for (int i=0; i\<nestedTables.length(); i++) {
			if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
				boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
				if (cont) nestedTables.get(i).iterate_by_<first(nestedColumns).absPos>_<first(nestedNestedColumns).absPos>(a0, b0, v);
			}
		}
	}
	<endif>
<endif>	

<if(first(nestedNestedColumns).indexed)>
	public void iterate_by_<first(nestedNestedColumns).absPos>(<first(nestedNestedColumns).type> a0, <visitorClass> v) {
		for (int i=0; i\<nestedTables.length(); i++) {
			if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
				boolean cont=v.visit<columns:{c|_<c.absPos>}>(i+base<rest(columns):{c|, col<i>(i)}>);
				if (cont) nestedTables.get(i).iterate_by_<first(nestedNestedColumns).absPos>(a0, v);
			}
		}
	}
<endif>
	
<nestedColumns:{c|<if(c.sorted)>
	public void iterate_part_<c.absPos>(<visitorClass> v, <c.type> val, int cmpOp) {
		for (int i=0; i\<nestedTables.length(); i++) {
			if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
				boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(i+base<rest(columns):{c2|, col<i>(i)}>);
				if (cont) nestedTables.get(i).iterate_part_<c.absPos>(v, val, cmpOp);
			\}
		\}
	\}
<endif>}>

<nestedColumns:{c|<if(c.sorted)>
	public void iterate_part_<c.absPos>_by_<first(columns).absPos>(<first(columns).type> a0, <visitorClass> v, <c.type> val, int cmpOp) {
		int i=(int)(a0-base); rangeCheck(i);
		if (nestedTables.get(i)==null) return;
		if (nestedTables.get(i).isEmpty()) return;
		
		boolean cont=v.visit<columns:{c2|_<c2.absPos>}>(a0<rest(columns):{c2|, col<i>(i)}>);
		if (cont) nestedTables.get(i).iterate_part_<c.absPos>(v, val, cmpOp);
	\}
<endif>}>
	public boolean contains_prefix(int n<rest(columns):{c|, <c.type> a<i>}>) {
		int i=(int)(n-base); rangeCheck(i);
		if (nestedTables.get(i)==null) return false;
		if (nestedTables.get(i).isEmpty()) return false;
	
		if (true<rest(columns): {c|&&(col<i>(i)<EqOpMap.(c.type)>(a<i>))}>)		
			return true;
		else return false;
	}
	public boolean contains(int n<rest(columns):{c|, <c.type> a<i>}><nestedColumns:{c|, <c.type> b<i>}>) {
		boolean contains_prefix=contains_prefix(n<rest(columns):{c|, a<i>}>);
		if (!contains_prefix) return false;
		
		int i=(int)(n-base);
		return nestedTables.get(i).contains(<nestedColumns:{c|b<i>}; separator=", ">);
	}
	public boolean contains(int n<rest(columns):{c|, <c.type> a<i>}><nestedColumns:{c|, <c.type> b<i>}>, boolean[] dontcare) {
		if (dontcare[0]) {
			boolean contains=false;
			for (int i=0; i\<nestedTables.length(); i++) {
				if (nestedTables.get(i)==null) continue;
				if (nestedTables.get(i).isEmpty()) continue;
				if (true<rest(columns): {c|&& (dontcare[<i>] || col<i>(i)<EqOpMap.(c.type)>(a<i>))}>)		
					contains = nestedTables.get(i).contains(<nestedColumns:{c|b<i>}; separator=", ">, Arrays.copyOfRange(dontcare, <length(columns)>, dontcare.length));
			
				if (contains) return true;
			}
			return false;
		} 
		int i=(int)(n-base); rangeCheck(i);
		if (nestedTables.get(i)==null) return false;
		if (nestedTables.get(i).isEmpty()) return false;
		
		<if(rest(columns))>
		if (<rest(columns): {c|(dontcare[<i>] || col<i>(i)<EqOpMap.(c.type)>(a<i>))}; separator="&& ">)		
			return nestedTables.get(i).contains(<nestedColumns:{c|b<i>}; separator=", ">);
		else return false;
		<else>
		return nestedTables.get(i).contains(<nestedColumns:{t|b<i>}; separator=", ">, Arrays.copyOfRange(dontcare, <length(columns)>, dontcare.length));
		<endif>		
	}
	
	public boolean insert(<columns:{c|<c.type> a<i0>};separator=","><nestedColumns:{c|, <c.type> b<i>}>) {
	<if(!isNested && !multiSet)>
		if (contains(<columns:{c|a<i0>};separator=","><nestedColumns:{c|, b<i>}>)) return false;
	<endif>		
		int i=(int)(a0-base); rangeCheck(i);
		if (nestedTables.get(i)!=null && !nestedTables.get(i).isEmpty()) {
			if (!contains_prefix(<columns:{c|a<i0>};separator=",">)) { 
				String msg = "Cannot insert the tuple {"+a0<rest(columns):{c|+","+a<i>}> +", ...} to <tableName>\n";
	 			msg += "<tableName> already contains {"+a0<rest(columns):{c|+","+col<i>(i)}> +", ...} with the same 1st (array index) column\n";
	 			msg += "To insert the tuple, add the columns to the nested columns.\n";
	 			throw new SociaLiteException(msg);
	 		}
		}
		// inserting the values
		<rest(columns): {c|col<i>[i] = a<i>;};separator="\n">	
		
		// insert into the nested table
		if (nestedTables.get(i)==null) nestedTables.set(i, <nestedTable>.create());
		if (isEmpty) isEmpty = false;
		nestedTables.get(i).insert(<nestedColumns:{c|b<i>};separator=", ">);
		<idxCols:{ic|index<ic.relPos>.add(a<ic.relPos>, i);<\n>}>
		return true;
	}
	/*
	public void insertAtomic(Iterator\<Tuple> iterator) {
        Tuple<[columns,nestedColumns]:{c|_<TupleMap.(c.type)>}> tuple;
	    while (iterator.hasNext()) {
	        tuple = (Tuple<[columns,nestedColumns]:{c|_<TupleMap.(c.type)>}>)iterator.next();
            insertAtomic(<[columns,nestedColumns]:{c|(<c.type>)tuple._<i0>};separator=",">);
	    }
	}
    public boolean insertAtomic(<columns:{c|<c.type> a<i0>};separator=","><nestedColumns:{c|, <c.type> b<i>}>) {
        int i=(int)(a0-base); rangeCheck(i);
        <nestedTable> nested;

        if (isEmpty) isEmpty = false;
        while (true) {
            nested = nestedTables.get(i);
            if (nested == null || nested.isEmpty()) {
                if (nested == updating)
                    continue;

                boolean success = nestedTables.compareAndSet(i, nested, updating);
                if (success) {
                    if (nested==null) nested = <nestedTable>.create();
                    nested.insertAtomic(<nestedColumns:{c|b<i>};separator=", ">);
                    nestedTables.compareAndSet(i, updating, nested);
                    return true;
                }
            } else {
                assert nested != updating;
                if (true<rest(columns): {c|&&(col<i>(i)<EqOpMap.(c.type)>(a<i>))}>) {
                    return nested.insertAtomic(<nestedColumns:{c|b<i>};separator=", ">);
                } else {
                    String msg = "Cannot insert the tuple {"+a0<rest(columns):{c|+","+a<i>}> +", ...} to <tableName>\n";
	 			    msg += "<tableName> already contains {"+a0<rest(columns):{c|+","+col<i>(i)}> +", ...} with the same 1st (array index) column\n";
	 			    msg += "To insert the tuple, add the columns to the nested columns.\n";
	 			    throw new SociaLiteException(msg);
                }
            }
        }
    }*/
		
	<methods;separator="\n">

	// groupby operations
<if(gbColumns)> // if(gbColumns) [
	<groupbyArr()>	
<endif> // ] if(gbColumns)
}
<classes; separator="\n">	
>>


groupbyArr() ::= <<
<if(gbNestedColumns)> // if(gbNestedColumns) [
  	public <gbAggrColumn.type> groupby(<gbColumns:{c|<c.type> a<i0>};separator=", ">
  									   <gbNestedColumns:{c|, <c.type> b<i0>}>) {
		int i=(int)(a0-base); rangeCheck(i);
		
		if (nestedTables.get(i)==null || nestedTables.get(i).isEmpty())
			throw new SociaLiteException("Unexpected groupby operation");
		
		if (true<rest(gbColumns):{c|&&(col<i>[i]<EqOpMap.(c.type)>(a<i>))}>) {
			return nestedTables.get(i).groupby(<gbNestedColumns:{c|b<i0>};separator=", ">);
		} else {
			throw new SociaLiteException("Unexpected groupby operation");
		}		
	}
	public boolean contains(<gbColumns:{c|<c.type> a<i0>};separator=", ">
							<gbNestedColumns:{c|, <c.type> b<i0>}>) {
		int i=(int)(a0-base); rangeCheck(i);
		if (nestedTables.get(i)==null || nestedTables.get(i).isEmpty())
			return false;
	
		if (true<rest(gbColumns):{c|&&(col<i>[i]<EqOpMap.(c.type)>(a<i>))}>)
			return nestedTables.get(i).contains(<gbNestedColumns:{c|b<i0>};separator=", ">);
		throw new SociaLiteException("Unexpected contains(for groupby) operation");
	}
	public boolean update(<columns:{c|<c.type> a<i0>};separator=","><nestedColumns:{c|,<c.type> b<i0>}>) {
		int i=(int)(a0-base); rangeCheck(i);
		
		if (nestedTables.get(i)==null) nestedTables.set(i, <nestedTable>.create());
		
		if (true<rest(gbColumns):{c|&&(col<i>[i]<EqOpMap.(c.type)>(a<i>))}>) {
			return nestedTables.get(i).update(<nestedColumns:{c|b<i0>};separator=",">);
		}
		throw new SociaLiteException("Unexpected update(for groupby) operation");
	}
<else> // if(!gbNestedColumns) [
	public <gbAggrColumn.type> groupby(<gbColumns:{c|<c.type> a<i0>};separator=", ">) {
		int i=(int)(a0-base); rangeCheck(i);
		
		if (nestedTables.get(i)==null || nestedTables.get(i).isEmpty())
			throw new SociaLiteException("Unexpected groupby operation");
		
		if (true<rest(gbColumns):{c|&&(col<i>[i]<EqOpMap.(c.type)>(a<i>))}>) {
			return col<gbAggrColumn.relPos>[i];
		} else {
			throw new SociaLiteException("Unexpected groupby operation");
		}		
	}
	<if(rest(gbColumns))>
	// group-by only with the array index
	public <gbAggrColumn.type> groupby(<first(gbColumns).type> a0) {
		int i=(int)(a0-base); rangeCheck(i);
		
		if (nestedTables.get(i)==null || nestedTables.get(i).isEmpty())
			throw new SociaLiteException("Unexpected groupby operation");
		return col<gbAggrColumn.relPos>[i];
	}
	<endif>
	public boolean contains(<gbColumns:{c|<c.type> a<i0>};separator=", ">) {
		int i=(int)(a0-base); rangeCheck(i);
		if (nestedTables.get(i)==null || nestedTables.get(i).isEmpty())
			return false;
			
		if (true<rest(gbColumns):{c|&&(col<i>[i]<EqOpMap.(c.type)>(a<i>))}>)
			return true;
		throw new SociaLiteException("Unexpected contains(for groupby) operation");
	}
	public boolean update(<columns:{c|<c.type> a<i0>};separator=","><nestedColumns:{c|,<c.type> b<i0>}>) {
		int i=(int)(a0-base); rangeCheck(i);
		if (nestedTables.get(i)==null) nestedTables.set(i, <nestedTable>.create());

		if (true<rest(gbColumns):{c|&&(col<i>[i]<EqOpMap.(c.type)>(a<i>))}>) {
			if (!(col<gbAggrColumn.relPos>[i]<EqOpMap.(gbAggrColumn.type)>(a<gbAggrColumn.relPos>))) { 
				nestedTables[i].clear();
				<rest(columns):{c|col<i>[i] = a<i>;<\n>}>
			}
				
			return nestedTables.get(i).insert(<nestedColumns:{c|b<i0>};separator=",">);
		}
		throw new SociaLiteException("Unexpected contains(for groupby) operation");
	}
<endif> // // ] gbNestedColumns
>>
