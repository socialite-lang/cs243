comment() ::= << firstIdx(), lastIdx(), etc are templates for sorted column >>

firstIdx(t, list, pos) ::= <<
assert <list>.size()!=0;
  <t> val = <list>.getQuick(<pos>);
  for (int i=<pos>; i>=0; i--) {
  	  if (<list>.getQuick(i)!=val) return i+1;
  }  
  return 0
>>

firstIdxObj(list, pos) ::= <<
Object val = <list>.getQuick(<pos>);
for (int i=<pos>; i>=0; i--) {
	if (!<list>.getQuick(i).equals(val)) return i+1;
}
return 0
>>

lastIdx(t, list, pos) ::= <<
assert <list>.size()!=0;
<t> val = <list>.getQuick(<pos>);
for (int i=<pos>; i \< <list>.size(); i++) {
	if (<list>.getQuick(i)!=val) return i-1;
}
return <list>.size()-1
>>

lastIdxObj(list, pos) ::= <<
assert <list>.size()!=0;
Object val = <list>.getQuick(<pos>);
for (int i=<pos>; i \< <list>.size(); i++) {
	if (!<list>.getQuick(i).equals(val)) return i-1;
}
return <list>.size()-1
>>

IsAsc ::= [
    "ASC": true,
    "Asc": true,
    "asc": true,
    default: false
]

IsPrimitive ::= [
	"boolean": true,
	"int": true,
	"long": true,
	"float": true,
	"double": true,
	default: false
]

CapFirst ::= [
	"int": "Int",
	"long": "Long",
	"float": "Float",
	"double": "Double",
	default: "_ERROR_"
]
IndexClass ::= [
    "int": "TIntObjectHashMap",
    "long": "TLongObjectHashMap",
    "float": "TFloatObjectHashMap",
    "double": "TDoubleObjectHashMap",
    default: "HashMap"
]

WriteF ::= [
    "int": "writeInt",
    "long": "writeLong",
    "float": "writeFloat",
    "double": "writeDouble",
    default: "writeObject"
]

ReadF ::= [
    "int": "readInt",
    "long": "readLong",
    "float": "readFloat",
    "double": "readDouble",
    default: "readObject"
]

TypeMap ::= [
   "int": "int",
    "long": "long",
    "float": "float",
    "double": "double",
    default: "Object"
]
TupleMap ::= [
    "int": "int",
    "long": "long",
    "float": "float",
    "double": "double",
    default: "Object"
]

TupleGetterMap ::= [
    "int": "getInt",
    "long": "getLong",
    "float": "getFloat",
    "double": "getDouble",
    default: "getObject"
]

TupleSetterMap ::= [
    "int": "setInt",
    "long": "setLong",
    "float": "setFloat",
    "double": "setDouble",
    default: "setObject"
]

ConstContainer ::= [
	"int": "SIntConstArrayList",
	"long": "SLongConstArrayList",
	"float": "SFloatConstArrayList",
    "double": "SDoubleConstArrayList",
    default: "SArrayList"
]
ContainerMap ::= [
    "int": "SIntArrayList",
    "long": "SLongArrayList",
    "float": "SFloatArrayList",
    "double": "SDoubleArrayList",
    default: "SArrayList"
]
AtomicArray ::= [
	"int": "AtomicIntegerArray",
	"long": "AtomicLongArray",
	"float": "AtomicFloatArray",
	"double": "AtomicDoubleArray",
	default: "ERROR"
]

getContainer(type) ::= <%
<if(IsPrimitive.(type))>
    <ContainerMap.(type)>
<else>
    <ContainerMap.(type)>\<<type>>
<endif>
%>

IteratorMap ::= [
	"int": "TIntIterator",
	"long": "TLongIterator",
	"float": "TFloatIterator",
	"double": "TDoubleIterator",
	default: "Iterator"
]

EqOpMap ::= [
    "int": "==",
    "long": "==",
    "float": "==",
    "double": "==",
    default: ".equals"
]

IsInt ::= [
    "int": true,
    "long": false,
    "float": false,
    "double": false,
    default: false
]
IsLong ::= [
    "int": false,
    "long": true,
    "float": false,
    "double": false,
    default: false
]
IsFloat ::= [
    "int": false,
    "long": false,
    "float": true,
    "double": false,
    default: false
]
IsDouble ::= [
    "int": false,
    "long": false,
    "float": false,
    "double": true,
    default: false
]
IsObject ::= [
    "int": false,
    "long": false,
    "float": false,
    "double": false,
    default: true
]
IsOne ::= [ "1": true, default:false ]
dummyX(arg1) ::= << DUMMY! >>