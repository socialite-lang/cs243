import "ColumnUtils.stg"

visitorBase(name, methodDecls) ::= <<
package socialite.visitors;

import socialite.util.Assert;
/** 
 * Auto-generated from VisitorBaseGen.java.
 */
public interface <name> extends IVisitor {
	<methodDecls; separator="\n">
}
>>


visitorImpl(methodDecls) ::= <<
package socialite.visitors;

import socialite.eval.Worker;
import socialite.tables.TableInst;
import socialite.util.Assert;

/** 
 * Auto-generated from VisitorBaseGen.java.
 * Do not edit manually, unless you know what you're doing.
 */
public abstract class VisitorImpl implements IVisitor {
	protected Worker worker=null;
	
	private boolean priority=false;	
	public void incPriority() { priority = true; }
	public boolean hasPriority() { return priority; }
	
	public void setWorker(Worker w) { worker = w; }
	public Worker getWorker() { return worker; }	
	public int getWorkerId() { return worker.id(); }	
	
	public void run() { Assert.not_implemented(); }	
	public int getRuleId() { return -1; }	
	public TableInst[] getDeltaTables() { return null; }
	public TableInst[] getPrivateTable() { return null; }
	
	<methodDecls; separator="\n">
}
>>

visit(columns, outmost=false) ::= <<
public boolean visit<if(!outmost)><columns:{c|_<c.absPos>}><endif>(<columns:{c|<TypeMap.(c.type)> a<i>};separator=",">) {
	Assert.not_implemented();
	return false;
}
>>

declVisit(columns, outmost=false) ::= <<
boolean visit<if(!outmost)><columns:{c|_<c.absPos>}><endif>(<columns:{c|<TypeMap.(c.type)> a<i>};separator=",">);
>>